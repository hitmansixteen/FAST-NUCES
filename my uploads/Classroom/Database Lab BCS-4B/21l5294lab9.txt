
--21L-5294
--Muhammad Laraib Akhtar

use master
go
drop database OrderSchema
go
Create Database OrderSchema
go
use OrderSchema
go
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Items](
	[ItemNo] [int] NOT NULL,
	[Name] [varchar](10) NULL,
	[Price] [int] NULL,
	[Quantity in Store] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[ItemNo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
INSERT [dbo].[Items] ([ItemNo], [Name], [Price], [Quantity in Store]) VALUES (100, N'A', 1000, 100)
INSERT [dbo].[Items] ([ItemNo], [Name], [Price], [Quantity in Store]) VALUES (200, N'B', 2000, 50)
INSERT [dbo].[Items] ([ItemNo], [Name], [Price], [Quantity in Store]) VALUES (300, N'C', 3000, 60)
INSERT [dbo].[Items] ([ItemNo], [Name], [Price], [Quantity in Store]) VALUES (400, N'D', 6000, 400)

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Customers](
	[CustomerNo] [varchar](2) NOT NULL,
	[Name] [varchar](30) NULL,
	[City] [varchar](3) NULL,
	[Phone] [varchar](11) NULL,
PRIMARY KEY CLUSTERED 
(
	[CustomerNo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
INSERT [dbo].[Customers] ([CustomerNo], [Name], [City], [Phone]) VALUES (N'C1', N'AHMED ALI', N'LHR', N'111111')
INSERT [dbo].[Customers] ([CustomerNo], [Name], [City], [Phone]) VALUES (N'C2', N'ALI', N'LHR', N'222222')
INSERT [dbo].[Customers] ([CustomerNo], [Name], [City], [Phone]) VALUES (N'C3', N'AYESHA', N'LHR', N'333333')
INSERT [dbo].[Customers] ([CustomerNo], [Name], [City], [Phone]) VALUES (N'C4', N'BILAL', N'KHI', N'444444')
INSERT [dbo].[Customers] ([CustomerNo], [Name], [City], [Phone]) VALUES (N'C5', N'SADAF', N'KHI', N'555555')
INSERT [dbo].[Customers] ([CustomerNo], [Name], [City], [Phone]) VALUES (N'C6', N'FARAH', N'ISL', NULL)

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Order](
	[OrderNo] [int] NOT NULL,
	[CustomerNo] [varchar](2) NULL,
	[Date] [date] NULL,
	[Total_Items_Ordered] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[OrderNo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
INSERT [dbo].[Order] ([OrderNo], [CustomerNo], [Date], [Total_Items_Ordered]) VALUES (1, N'C1', CAST(0x7F360B00 AS Date), 30)
INSERT [dbo].[Order] ([OrderNo], [CustomerNo], [Date], [Total_Items_Ordered]) VALUES (2, N'C3', CAST(0x2A3C0B00 AS Date), 5)
INSERT [dbo].[Order] ([OrderNo], [CustomerNo], [Date], [Total_Items_Ordered]) VALUES (3, N'C3', CAST(0x493C0B00 AS Date), 20)
INSERT [dbo].[Order] ([OrderNo], [CustomerNo], [Date], [Total_Items_Ordered]) VALUES (4, N'C4', CAST(0x4A3C0B00 AS Date), 15)

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OrderDetails](
	[OrderNo] [int] NOT NULL,
	[ItemNo] [int] NOT NULL,
	[Quantity] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[OrderNo] ASC,
	[ItemNo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
INSERT [dbo].[OrderDetails] ([OrderNo], [ItemNo], [Quantity]) VALUES (1, 200, 20)
INSERT [dbo].[OrderDetails] ([OrderNo], [ItemNo], [Quantity]) VALUES (1, 400, 10)
INSERT [dbo].[OrderDetails] ([OrderNo], [ItemNo], [Quantity]) VALUES (2, 200, 5)
INSERT [dbo].[OrderDetails] ([OrderNo], [ItemNo], [Quantity]) VALUES (3, 200, 60)

GO

ALTER TABLE [dbo].[OrderDetails]  ADD FOREIGN KEY([ItemNo])
REFERENCES [dbo].[Items] ([ItemNo]) on delete cascade on update cascade
GO

ALTER TABLE [dbo].[OrderDetails]   ADD FOREIGN KEY([OrderNo]) 
REFERENCES [dbo].[Order] ([OrderNo]) on delete cascade on update cascade
GO

--q1---------------------------
create trigger q1
on dbo.customers
instead of delete
as begin
	declare @cusNo varchar(2)

	select @cusNo = deleted.CustomerNo from deleted

	if @cusNo in 
	(
		select c.CustomerNo
		from Customers c
		except
		select o.CustomerNo
		from [Order] o
	)
	begin
		print'Customer deleted'
	end
	else
	begin 
		rollback
		print'Customer who ordered atleast one item cannot be deleted'
	end
end
go

delete from Customers where Customers.CustomerNo = 'C1';
select * from Customers

--q2---------------------------
create trigger q2
on dbo.[orderdetails]
instead of insert
as begin
	declare @quantity int,
			@itemno int


	select @quantity = inserted.Quantity,@itemno=inserted.ItemNo
	from inserted

	if exists
	(
		select *
		from Items i 
		where @quantity<=i.[Quantity in Store] and @itemno = i.ItemNo
	)
	begin
		print'Item Inserted'
	end
	else
	begin 
		rollback
		print' quantity in order details is not less than or equal to the quantity in store!'
	end
end
go



INSERT [dbo].[OrderDetails] ([OrderNo], [ItemNo], [Quantity]) VALUES (4, 200, 1000)

--q3---------------------------
create trigger q3
on dbo.[orderdetails]
after update
as begin
	declare @oldQuantity int,
			@oldItemno int,
			@newQuantity int,
			@newItemno int


	select @oldquantity = deleted.Quantity,@olditemno=deleted.ItemNo
	from deleted

	select @newQuantity = inserted.Quantity,@newItemno=inserted.ItemNo
	from inserted

	if exists
	(
		select *
		from Items i 
		where @newQuantity<=i.[Quantity in Store] and @newItemno = i.ItemNo
	)
	begin
		print'Item Updated'
	end
	else
	begin 
		rollback
		print' quantity in order details is not less than or equal to the quantity in store!'
	end
end
go

update dbo.OrderDetails set Quantity = 1000
where ItemNo = 400

--q4---------------------------
create trigger q4
on dbo.items
after delete
as begin
	declare @quantity int,
			@itemno int


	select @quantity = deleted.[Quantity in Store],@itemno=deleted.ItemNo
	from deleted

	if exists
	(
		select *
		from Items i 
		where @quantity<= 100 and @itemno = i.ItemNo
	)
	begin
		print'Item deleted'
	end
	else
	begin 
		rollback
		print' quantity of item in store is greater than 100'
	end

end
go

delete from Items where Items.ItemNo = 400;

--q5---------------------------
create trigger q5
on dbo.[order]
instead of insert
as begin
	declare @date date,
			@orderno int,
			@customerno varchar(2),
			@totalitemsordered int


	select @date = i.Date,@orderno=i.OrderNo,@customerno=i.CustomerNo,@totalitemsordered=i.Total_Items_Ordered
	from inserted i

	set @date = getdate()

	INSERT [dbo].[Order] ([OrderNo], [CustomerNo], [Date], [Total_Items_Ordered]) VALUES (@orderno,@customerno ,@date , @totalitemsordered)
	
end
go

INSERT [dbo].[Order] ([OrderNo], [CustomerNo], [Date], [Total_Items_Ordered]) VALUES (5, N'C1', CAST(0x7F360B00 AS Date), 30)
select * from [Order]

--q6---------------------------
create trigger q6
on dbo.customers
after insert
as begin
	declare @customerno varchar(2),
			@name varchar(30),
			@city varchar(3),
			@phone varchar(11)

	select @customerno=i.CustomerNo,@name=i.Name,@city=i.City,@phone=i.Phone
	from inserted i

	if @customerno is null or @name is null or @city is null or @phone is null
	begin
		print'cannot insert NULL values'
		rollback
	end
end
go

drop trigger q6

INSERT [dbo].[Customers] ([CustomerNo], [Name], [City], [Phone]) VALUES (N'C7', NULL, N'LHU', N'111141')


--q7---------------------------
create procedure signup 
	@No varchar(2),
	@Name varchar(30),
	@City varchar(3),
	@Phone varchar(11),
	@flag int output
	as
	begin

		if exists (select * from Customers c where c.CustomerNo = @No)
		begin
			set @flag = 1
		end
		else if (len(@Phone)!= 6)
		begin
			set @flag = 3
		end
		else
		begin
			set @flag = 0
		end		
	end
	go

drop procedure signup

select * from Customers

declare @outflag float
exec signup @No = 'C7', @Name = 'LARAIB',@City = 'LHR',@phone = '123456', @flag = @outflag output

select @outflag
go

